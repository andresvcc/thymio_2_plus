{
	"blocks": [
		{
			"name": "!stop",
			"l2": {
				"statement": [
					"motor.left.target = 0;\n",
					"motor.right.target = 0;\n",
					"sound.system(-1);\n",
					"leds.circle(32,32,32,32,32,32,32,32);\n",
					"timer.period[0] = 100;\n",
					"onevent timer0 {\n",
					"leds.circle(0,0,0,0,0,0,0,0);\n",
					"}\n"
				]
			}
		},
		{
			"name": "!init",
			"l2": {
				"initCodeExec": [
					"sound.system(-1);\n"
				]
			}
		},
		{
			"name": "!volume",
			"l2": {
				"statement": [
					"// set volume\n",
					"_system.settings.write(0, `$[0] > 8 ? 0 : 8 - $[0]`);\n"
				]
			}
		},
		{
			"name": "button",
			"l2": {
				"sectionBegin": "onevent buttons {\n",
				"sectionEnd": "}\n",
				"clause": "`['center', 'forward', 'backward', 'right', 'left'].map(function (s, i) { return $[i] ? 'button.' + s : ''; }).filter(function (s) { return s; }).join(' && ') || ['center', 'forward', 'backward', 'right', 'left'].map(function (s) { return 'button.' + s; }).join(' || ')`"
			}
		},
		{
			"name": "button 1",
			"l2": {
				"sectionBegin": "onevent buttons {\n",
				"sectionEnd": "}\n",
				"clause": "button.`['center', 'forward', 'backward', 'right', 'left'][$[0]]`"
			}
		},
		{
			"name": "horiz prox",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'prox.horizontal[' + ix + '] ' + ($[i] > 0 ? '>= 2000' : '<= 1000') : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' || ')`"
			}
		},
		{
			"name": "horiz prox adv",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { var p = 'prox.horizontal[' + ix + '] ', l = Math.round(17 + 33 * $[7]) + '00', g = Math.round(17 + 33 * $[8]) + '00'; return $[i] === 1 ? p + '>= ' + g : $[i] === 2 ? p + '< ' + l : $[i] === 3 ? p + '>= ' + l + ' && ' + p + '< ' + g : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' || ')`"
			}
		},
		{
			"name": "horiz prox 1",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[2, 1, 3, 0, 4, 5, 6].map(function (ix, i) { return $[i] ? 'prox.horizontal[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * $[7]) + '00' : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.horizontal[' + ix + '] >= 2000'; }).join(' || ')`"
			}
		},
		{
			"name": "ground",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'prox.ground.delta[' + ix + '] ' + ($[i] > 0 ? '>= 450' : '<= 400') : ''; }).filter(function (s) { return s; }).join(' && ') || [0, 1].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' || ')`"
			}

		},
		{
			"name": "ground adv",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[0, 1].map(function (ix, i) { var p = 'prox.ground.delta[' + ix + '] ', l = Math.round(25 + 40 * $[2]) + '0', g = Math.round(25 + 40 * $[3]) + '0'; return $[i] === 1 ? p + '>= ' + g : $[i] === 2 ? p + '< ' + l : $[i] === 3 ? p + '>= ' + l + ' && ' + p + '< ' + g : ''; }).filter(function (s) { return s; }).join(' && ') || [2, 1, 3, 0, 4, 5, 6].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' || ')`"
			}
		},
		{
			"name": "ground 1",
			"l2": {
				"sectionBegin": "onevent prox {\n",
				"sectionEnd": "}\n",
				"clause": "`[0, 1].map(function (ix, i) { return $[i] ? 'prox.ground.delta[' + ix + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(25 + 40 * $[2]) : ''; }).filter(function (s) { return s; }).join(' && ') || [0, 1].map(function (ix) { return 'prox.ground.delta[' + ix + '] >= 450'; }).join(' || ')`"
			}
		},
		{
			"name": "tap",
			"l2": {
				"initVarDecl": [
					"bool tapped;\n"
				],
				"initCodeExec": [
					"tapped = false;\n"
				],
				"sectionBegin": "onevent tap {\n",
				"sectionEnd": "}\n",
				"sectionPreamble": "tapped = true;\n",
				"clauseAsCondition": "tapped"
			}
		},
		{
			"name": "accelerometer",
			"l2": {
				"initVarDecl": [
					"`$[0] == 0 ? 'bool tapped;\\n' : ''`"
				],
				"initCodeExec": [
					"`$[0] == 0 ? 'tapped = false;\\n' : ''`"
				],
				"sectionBegin": "onevent `$[0] == 0 ? 'tap' : 'acc'` {\n",
				"sectionEnd": "}\n",
				"sectionPreamble": "`$[0] == 0 ? 'tapped = true;\\n' : ''`",
				"clauseInit": "`$[0] == 1 ? 'fixed rollAngle = atan2(acc[0], acc[2]);\\n' : $[0] == 2 ? 'fixed pitchAngle = atan2(acc[1], acc[2]);\\n' : ''`",
				"clause": "`$[0] == 0 ? 'tapped' : (function (name, a) { return a <= -6 ? name + ' < ' + (Math.PI / 12 * (a + 0.5)).toFixed(2) : a >= 6 ? name + ' >= ' + (Math.PI / 12 * (a - 0.5)).toFixed(2) : name + ' >= ' + (Math.PI / 12 * (a - 0.5)).toFixed(2) + ' && ' + name + ' < ' + (Math.PI / 12 * (a + 0.5)).toFixed(2); })($[0] === 1 ? 'rollAngle' : 'pitchAngle', $[0] === 2 ? $[1] : -$[1])`"
			}
		},
		{
			"name": "roll",
			"l2": {
				"sectionBegin": "onevent acc {\n",
				"sectionEnd": "}\n",
				"clauseInit":
					"fixed rollAngle = atan2(-acc[0], acc[2]);\n",
				"clause":
					"`Math.abs($[0]) === 12 ? 'rollAngle >= ' + (Math.PI / 12 * (12 - 0.5)).toFixed(2) + ' or rollAngle < ' + (Math.PI / 12 * (-12 + 0.5)).toFixed(2) : 'rollAngle >= ' + (Math.PI / 12 * ($[0] - 0.5)).toFixed(2) + ' and rollAngle < ' + (Math.PI / 12 * ($[0] + 0.5)).toFixed(2)`"
			}
		},
		{
			"name": "pitch",
			"l2": {
				"sectionBegin": "onevent acc {\n",
				"sectionEnd": "}\n",
				"clauseInit":
					"fixed pitchAngle = atan2(-acc[1], acc[2]);\n",
				"clause":
					"`Math.abs($[0]) === 12 ? 'pitchAngle >= ' + (Math.PI / 12 * (12 - 0.5)).toFixed(2) + ' or pitchAngle < ' + (Math.PI / 12 * (-12 + 0.5)).toFixed(2) : 'pitchAngle >= ' + (Math.PI / 12 * ($[0] - 0.5)).toFixed(2) + ' and pitchAngle < ' + (Math.PI / 12 * ($[0] + 0.5)).toFixed(2)`"
			}
		},
		{
			"name": "yaw",
			"l2": {
				"sectionBegin": "onevent acc {\n",
				"sectionEnd": "}\n",
				"clauseInit":
					"fixed yawAngle = atan2(-acc[0], acc[1]);\n",
				"clause":
					"`Math.abs($[0]) === 12 ? 'yawAngle >= ' + (Math.PI / 12 * (12 - 0.5)).toFixed(2) + ' or yawAngle < ' + (Math.PI / 12 * (-12 + 0.5)).toFixed(2) : 'yawAngle >= ' + (Math.PI / 12 * ($[0] - 0.5)).toFixed(2) + ' and yawAngle < ' + (Math.PI / 12 * ($[0] + 0.5)).toFixed(2)`"
			}
		},
		{
			"name": "clap",
			"l2": {
				"initCodeExec": [
					[
						"// setup threshold for detecting claps\n",
						"mic.threshold = 250;\n"
					]
				],
				"sectionBegin": "onevent buttons {\n",
				"sectionEnd": "}\n",
				"clause": "mic.intensity > mic.threshold"
			}
		},
		{
			"name": "init",
			"l2": {
				"sectionBegin": "// initialization\n"
			}
		},
		{
			"name": "timer",
			"l2": {
				"initVarDecl": [
					"bool timerElapsed;\n"
				],
				"initCodeExec": [
					[
						"// stop timer 0\n",
						"timer.period[0] = 0;\n"
					],
					"timerElapsed = false;\n"
				],
				"sectionBegin": "onevent timer0 {\n",
				"sectionEnd": "}\n",
				"sectionPreamble": "timerElapsed = true;\ntimer.period[0] = 0;\n",
				"clauseAsCondition": "timerElapsed"
			}
		},
		{
			"name": "clock",
			"l2": {
				"sectionBegin": "onevent `$[0] === 10 ? 'prox' : 'buttons'` {\n",
				"sectionEnd": "}\n"
			}
		},
		{
			"name": "user event",
			"l2": {
				"sectionBegin": "onevent user {\n",
				"sectionEnd": "}\n",
				"clause": "event.args[0] == `$[0]`",
				"clauseAlwaysEval": true
			}
		},
		{
			"name": "remote control arrows",
			"l2": {
				"sectionBegin": "onevent rc5 {\n",
				"sectionEnd": "}\n",
				"clause": "`[[85, 17], [80, 32], [81, 33], [86, 16, 78], [87, 13]][$[0]].map(function (c) { return 'rc5.command == ' + c; }).join(' or ')`",
				"clauseAlwaysEval": true
			}
		},
		{
			"name": "state",
			"l2": {
				"initVarDecl": [
					[
						"int state;\n"
					]
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"clause":
				"(state & `$.reduce(function (a, b, i) { return b !== 0 ? a | [128,2,32,8][i] : a; }, 0)`) == `$.reduce(function (a, b, i) { return b === 1 ? a | [128,2,32,8][i] : a; }, 0)`"
			}
		},
		{
			"name": "state 8",
			"l2": {
				"initVarDecl": [
					[
						"int state;\n"
					]
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"clause": "state == `1 << $[0]`"
			}
		},
		{
			"name": "counter comparison",
			"l2": {
				"initVarDecl": [
					"int state;\n"
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"clause": "state `$[0] === 0 ? '==' : $[0] > 0 ? '>=' : '<='` `$[1]`"
			}
		},
		{
			"name": "color state",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n"
				],
				"clause": "`$.map(function (p, i) { return 'topColor[' + i + '] / 11 == ' + Math.floor(p * 2.99); }).join(' && ')`"
			}
		},
		{
			"name": "color 8 state",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n"
				],
				"clause": "topColor[0] `$[0] % 2 ? '>=' : '<'` 16 && topColor[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 && topColor[2] `$[0] >= 4 ? '>=' : '<'` 16"
			}
		},
		{
			"name": "motor state",
			"l2": {
				"clause": [
					"`$[0] == 0 ? 'abs(' : ''`motor.left.target`$[0] > 0 ? ' > ' : $[0] < 0 ? ' < -' : ') < '``Math.round(250 * slowdown)` ",
					"&& `$[1] == 0 ? 'abs(' : ''`motor.right.target`$[1] > 0 ? ' > ' : $[1] < 0 ? ' < -' : ') < '``Math.round(250 * slowdown)`"
				]
			}
		},
		{
			"name": "motor",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement":
					[
						"motor.left.target = `Math.round(500 * slowdown * $[0])`;\n",
						"motor.right.target = `Math.round(500 * slowdown * $[1])`;\n"
					]
			}
		},
		{
			"name": "move",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"motor.left.target = `Math.round([0, 100, -100, 75, 125, -100, 100][$[0]] * slowdown)`;\n",
					"motor.right.target = `Math.round([0, 100, -100, 125, 75, 100, -100][$[0]] * slowdown)`;\n"
				]
			}
		},
		{
			"name": "nn obstacles",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"motor.left.target = `Math.round(500 * $[0] * slowdown)`",
					"`Math.round(20 * $[1]) ? ' - prox.horizontal[2] / 10 * ' + Math.round(20 * $[1]).toString(10) + ' / 16' : ''`",
					"`Math.round(20 * $[2]) ? ' + prox.horizontal[0] / 10 * ' + Math.round(20 * $[2]).toString(10) + ' / 16' : ''`",
					"`Math.round(20 * $[3]) ? ' - prox.horizontal[4] / 10 * ' + Math.round(20 * $[3]).toString(10) + ' / 16' : ''`;\n",
					"motor.right.target = `Math.round(500 * $[0] * slowdown)`",
					"`Math.round(20 * $[1]) ? ' - prox.horizontal[2] / 10 * ' + Math.round(20 * $[1]).toString(10) + ' / 16' : ''`",
					"`Math.round(20 * $[2]) ? ' + prox.horizontal[4] / 10 * ' + Math.round(20 * $[2]).toString(10) + ' / 16' : ''`",
					"`Math.round(20 * $[3]) ? ' - prox.horizontal[0] / 10 * ' + Math.round(20 * $[3]).toString(10) + ' / 16' : ''`;\n"
				]
			}
		},
		{
			"name": "top color",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n",
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n",
					"topColor = [`$.map(function (x) { return Math.round(32 * x); }).join(', ')`];\n"
				],
				"statementWithoutInit":
					"leds.top(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
			}
		},
		{
			"name": "top color 8",
			"l2": {
				"initVarDecl": [
					"int topColor[3];\n"
				],
				"initCodeExec": [
					"topColor = [0, 0, 0];\n",
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.top(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n",
					"topColor = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`];\n"
				]
			}
		},
		{
			"name": "bottom color",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n",
					"leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
				]
			}
		},
		{
			"name": "bottom-left color",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
				]
			}
		},
		{
			"name": "bottom-right color",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.right(`$.map(function (x) { return Math.round(32 * x); }).join(', ')`);\n"
				]
			}
		},
		{
			"name": "bottom color 8",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n",
					"leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n"
				]
			}
		},
		{
			"name": "bottom-left color 8",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n"
				]
			}
		},
		{
			"name": "bottom-right color 8",
			"l2": {
				"initCodeExec": [
					[
						"// reset outputs\n",
						"leds.top(0, 0, 0);\n",
						"leds.bottom.left(0, 0, 0);\n",
						"leds.bottom.right(0, 0, 0);\n",
						"leds.circle(0, 0, 0, 0, 0, 0, 0, 0);\n"
					]
				],
				"statement": [
					"leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`);\n"
				]
			}
		},
		{
			"name": "notes",
			"l2": {
				"initVarDecl": [
					"const pi = 3.14;\n",
					[
						"// variables for notes\n",
						"int notes[6];\n",
						"int durations[6];\n",
						"int note_index;\n",
						"int wave[142];\n"
					]
				],
				"initCodeExec": [
					[
						"// init notes\n",
						"for (int i = 0; i < size(wave); i++) {\n",
						"wave[i] = 128 * sin(fixed(i) / size(wave) * 2 * pi);\n",
						"}\n",
						"sound.wave(wave);\n",
						"note_index = 6;\n"
					],
					[
						"sound.system(-1);\n"
					]
				],
				"initCodeDecl": [
					[
						"// when a note is finished, play the next one\n",
						"onevent sound.finished {\n",
						"if (note_index < size(notes)) {\n",
						"sound.freq(notes[note_index], durations[note_index]);\n",
						"note_index++;\n",
						"}\n",
						"}\n"
					]
				],
				"statement": [
					"notes = [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`];\n",
					"durations = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`];\n",
					"note_index = 1;\n",
					"note_count = 6;\n",
					"sound.freq(notes[0], durations[0]);\n"
				]
			}
		},
		{
			"name": "play",
			"l2": {
				"initCodeExec": [
					"sound.system(-1);\n"
				],
				"statement": "sound.play(`$[0].toString(10)`);\n"
			}
		},
		{
			"name": "play stop",
			"l2": {
				"initCodeExec": [
					"sound.system(-1);\n"
				],
				"statement": "sound.play(-1);\n"
			}
		},
		{
			"name": "set state",
			"l2": {
				"initVarDecl": [
					[
						"int state;\n"
					]
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display a binary value\n",
						"void display_binary(int n) {\n",
						"leds.circle((n&1)<<5,(n&2)<<4,(n&4)<<3,(n&8)<<2,",
						"(n&16)<<1,n&32,(n&64)>>1,(n&128)>>2);\n",
						"}\n"
					]
				],
				"statement": [
					"state = state & `0xff ^ $.reduce(function (a, b, i) { return b !== 0 ? a | [128,2,32,8][i] : a; }, 0)` | `$.reduce(function (a, b, i) { return b === 1 ? a | [128,2,32,8][i] : a; }, 0)`;\n",
					"display_binary(state);\n"
				]
			}
		},
		{
			"name": "toggle state",
			"l2": {
				"initVarDecl": [
					[
						"int state;\n"
					]
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display a binary value\n",
						"void display_binary(int n) {\n",
						"leds.circle((n&1)<<5,(n&2)<<4,(n&4)<<3,(n&8)<<2,",
						"(n&16)<<1,n&32,(n&64)>>1,(n&128)>>2);\n",
						"}\n"
					]
				],
				"statement": [
					"state ^= `$.reduce(function (a, b, i) { return b ? a | [128,2,32,8][i] : a; }, 0)`;\n",
					"display_binary(state);\n"
				]
			}
		},
		{
			"name": "set state 8",
			"l2": {
				"initVarDecl": [
					[
						"int state;\n"
					]
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display a binary value\n",
						"void display_binary(int n) {\n",
						"leds.circle((n&1)<<5,(n&2)<<4,(n&4)<<3,(n&8)<<2,",
						"(n&16)<<1,n&32,(n&64)>>1,(n&128)>>2);\n",
						"}\n"
					]
				],
				"statement": [
					"state = `1 << $[0]`;\n",
					"display_binary(state);\n"
				],
				"statementWithoutInit": [
					"leds.circle(`$[0] === 0 ? 32 : 0`, `$[0] === 1 ? 32 : 0`, `$[0] === 2 ? 32 : 0`, `$[0] === 3 ? 32 : 0`, ",
						"`$[0] === 4 ? 32 : 0`, `$[0] === 5 ? 32 : 0`, `$[0] === 6 ? 32 : 0`, `$[0] === 7 ? 32 : 0`);\n"
				]
			}
		},
		{
			"name": "change state 8",
			"l2": {
				"initVarDecl": [
					[
						"// variables for exclusive state\n",
						"int state;\n"
					]
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display a binary value\n",
						"void display_binary(int n) {\n",
						"leds.circle((n&1)<<5,(n&2)<<4,(n&4)<<3,(n&8)<<2,",
						"(n&16)<<1,n&32,(n&64)>>1,(n&128)>>2);\n",
						"}\n"
					]
				],
				"statement": [
					"state = `$[0] > 0 ? '(state << 1) & 0xff | (state >> 7) & 1' : '(state >> 1) & 0x7f | (state << 7) & 0x80'`;\n",
					"display_binary(state);\n"
				],
				"statementWithoutInit": [
					"leds.circle(`$[0] === 0 ? 32 : 0`, `$[0] === 1 ? 32 : 0`, `$[0] === 2 ? 32 : 0`, `$[0] === 3 ? 32 : 0`, ",
						"`$[0] === 4 ? 32 : 0`, `$[0] === 5 ? 32 : 0`, `$[0] === 6 ? 32 : 0`, `$[0] === 7 ? 32 : 0`);\n"
				]
			}
		},
		{
			"name": "set counter",
			"l2": {
				"initVarDecl": [
					"int state;\n"
				],
				"initCodeExec": [
					"state = 0;\n"
				],
				"initCodeDecl": [
					[
						"// display a binary value\n",
						"void display_binary(int n) {\n",
						"leds.circle((n&1)<<5,(n&2)<<4,(n&4)<<3,(n&8)<<2,",
						"(n&16)<<1,n&32,(n&64)>>1,(n&128)>>2);\n",
						"}\n"
					]
				],
				"statement": [
					"`$[0] === 0 ? 'state = 0;' : $[0] > 0 ? 'if (state < 255) {\\nstate++;\\n}' : 'if (state > 0) {\\nstate--;\\n}'`\n",
					"display_binary(state);\n"
				]
			}
		},
		{
			"name": "set timer",
			"l2": {
				"initVarDecl": [
					"bool timerElapsed;\n"
				],
				"initCodeExec": [
					[
						"// stop timer 0\n",
						"timer.period[0] = 0;\n"
					],
					"timerElapsed = false;\n"
				],
				"statement": "timer.period[0] = `Math.round(1000 * $[0] / slowdown)`;\n"
			}
		},
		{
			"name": "set timer log",
			"l2": {
				"initVarDecl": [
					"bool timerElapsed;\n"
				],
				"initCodeExec": [
					[
						"// stop timer 0\n",
						"timer.period[0] = 0;\n"
					],
					"timerElapsed = false;\n"
				],
				"statement": "timer.period[0] = `Math.round(1000 * $[0] / slowdown)`;\n"
			}
		},
		{
			"name": "send user event",
			"l2": {
				"statement": "emit(\"user\", `$[0]`);\n"
			}
		},
		{
			"name": "picture comment",
			"l2": {}
		}
	]
}
