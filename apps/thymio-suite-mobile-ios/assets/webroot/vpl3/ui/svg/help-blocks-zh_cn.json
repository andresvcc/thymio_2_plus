{
	"help": {
		"zh-cn": {
			"blocks": {
				"button 1": [
					"# 单按钮",
					"![单个按钮](vpl:block:button-1)" ,
					"**使用的传感器：**Thymio上有五个电容式触摸按钮。",
					"**触发条件：**按钮按下时触发此事件。",
					"**参数：**橙色突出显示的按钮是触发事件的按钮。灰色按钮被忽略。",
					"**例如：**当按下'前进'按钮时,则…（例如,机器人动作开始向前移动）。"
				],
				"button": [
					"# 多个按钮",
					"![按钮](vpl:block：按钮",
					"**使用的传感器：**Thymio 上有五个电容式触摸按钮。",
					"**触发条件：**当按下一个或多个按钮时触发此事件。",
					"**参数：**橙色突出显示的按钮是触发事件的按钮。当按下多个按钮时,当同时按下所有按钮时会触发事件。灰色按钮被忽略。",
					"**例如：**按下'前进'和'向右'按钮时,则…（例如,机器人操作开始向右前进）。"
				],
				"horiz prox" : [
					"# 接近传感器",
					"![接近传感器](vpl:block:horiz prox)",
					"**使用的传感器：**前面有五个接近传感器,后面有两个。",
					"**触发条件：**接近红外传感器可测量放置在其前面的物体的反射。 如果存在反射，则在它们前面有一个接近或反射的障碍物。 没有反射意味着黑色障碍物或根本没有障碍物。 该事件是由七个不同的传感器在七个不同方向上检测Thymio周围的障碍物触发的。",
					"**参数：**。如果没有障碍物（或黑色障碍物或反射表面）,将其设置为黑色会使传感器触发事件。当传感器设置为灰色时,它将被忽略。",
					"选择多个传感器触发事件后，条件组合触发事件。 如果已将前传感器和左传感器设置为检测障碍物，则将在前传感器和左传感器检测到障碍物时触发该事件。",
					"**例如：**当左侧传感器检测到障碍物时,则…（机器人动作,例如右转以避开障碍物）。"
				],
				"horiz prox adv": [
					"# 具有低阈值和高阈值的接近传感器",
					"![水平接近传感器高级设置](vpl:block:horiz prox adv)",
					"**使用的传感器：**前面有五个接近传感器,后面有两个。",
					"**触发条件：**接近红外传感器测量放置在其前面的物体的反射。如果存在反射,则在他们前面有一个近距离或反射障碍物。没有反射意味着要么是黑色的障碍,要么根本没有障碍。该事件由七个不同的传感器在七个不同方向上检测到Thymio周围的障碍物触发。",
					"**参数：**。如果将传感器设置为带有红色边框的白色，则当检测到反射性障碍物或白色表面时，传感器会触发事件。 将其设置为黑色会使传感器不再有障碍物（或黑色表面或透明表面）时触发事件。 将其设置为深灰色意味着传感器将触发事件，触发前两次之间的级别。 当传感器设置为浅灰色时，它将被忽略。 两个滑块可用于设置两个所需的阈值：检测到障碍物/白色和灰色之间的阈值以及灰色和黑色/无障碍物之间的阈值。",
					"选择多个传感器触发事件后，条件组合触发事件。 如果已将前传感器和左传感器设置为检测障碍物，则将在前传感器和左传感器检测到障碍物时触发该事件。",
					"**例如：**当左侧传感器检测到非常明亮的障碍物时,则……（机器人动作,例如右转以避开障碍物）。"
				],
				"horiz prox back adv": [
					"# 可调后部传感器",
					"![后部水平接近传感器高级设置](vpl:block:horiz-prox-back-adv)",
					"**使用的传感器：**Thymio后部有两个接近传感器。",
					"**触发条件：**接近红外传感器可测量放置在其前面的物体的反射。 如果有反射，则在它们前面有一个近距离的或反射性很强的障碍物。 没有反射意味着黑色障碍物或根本没有障碍物。 该事件是由两个后红外传感器在两个不同方向上检测Thymio后面的障碍物触发的。 检测水平可以调整。",
					"**参数：**。如果将传感器设置为带有红色边框的白色，则传感器在检测到反射性障碍物时会触发事件。 将其设置为黑色可让传感器在不再有障碍物（或黑色障碍物或透明表面）的情况下触发事件。 当传感器设置为灰色时，它将被忽略。",
					"如果同时选择了两个传感器来触发事件，则通过两个条件的组合来触发事件。 如果已将右后传感器和左后传感器设置为检测障碍物，则当右传感器和左传感器检测到障碍物时将触发该事件。",
					"程序员可以调整检测级别。这将间接指定障碍物是近距离还是远距离被探测到。阈值越高,检测物体越接近传感器。",
					"当左后传感器检测到障碍物时，则…（机器人动作，例如，全速前进以避开障碍物）。"
				],
				"horiz prox front adv": [
					"# 具有阈值的前接近传感器",
					"![前水平接近传感器高级设置](vpl:block:horiz-prox-front-adv)",
					"**使用的传感器：*Thymio前部有五个接近传感器。",
					"**触发条件：**接近红外传感器可测量放置在其前面的物体的反射。 如果存在反射，则在它们前面有一个紧密或反射的障碍物。 没有反射意味着黑色障碍物或根本没有障碍物。 通过检测Thymio前方五个不同方向的障碍物来触发此事件。 检测水平可以调整。",
					"**参数：**。如果将传感器设置为带有红色边框的白色，则传感器在检测到反射性障碍物时会触发事件。 将其设置为黑色可让传感器在不再有障碍物（或黑色障碍物或透明表面）的情况下触发事件。 当传感器设置为灰色时，它将被忽略。",
					"选择多个传感器触发事件后，条件组合触发事件。 如果已将前传感器和左传感器设置为检测障碍物，则将在前传感器和左传感器检测到障碍物时触发该事件。",
					"程序员可以调整检测级别。这将间接指定障碍物是近距离还是远距离被探测到。阈值越高,检测物体越接近传感器。",
					"当左传感器检测到障碍物时，然后…（机器人动作，例如，向右转以避开障碍物）。"
				],
				"ground": [
					"# 地面传感器",
					"![地面](vpl:block:ground)",
					"**使用的传感器：**两个地面接近传感器。",
					"**触发条件：**此事件是由检测到Thymio下方是否存在地面反射触发的。 请注意，透明或黑色（无光泽，无反射）表面将被检测为未触发传感器。 此事件使程序员可以分别定义左右地面传感器应检测到的内容，以触发该事件。 这对于检测白色表面上的黑线非常有用，例如，可以创建行跟随行为。",
					"**参数：**当传感器设置为带有红色边框的白色时，传感器会检测到反射表面，例如白色。 将其设置为黑色将使传感器无法检测到任何地面（或黑色或透明地面）。 当传感器设置为灰色时，它将被忽略。",
					"**例如：当左传感器检测到白色表面而右传感器检测到黑色表面时，则…（机器人动作，例如，向右转向黑线）。"
				],
				"ground adv": [
					"# 具有2个阈值的地面反射传感器",
					"![地面传感器高级设置](vpl:block:ground-adv)",
					"**使用的传感器：**两个地面接近传感器。",
					"**触发条件:** 地面接近红外传感器测量放置在其底部的物体的反射。 如果存在反射，则在它们前面有一个接近或反射（白色）的表面。 没有反射意味着黑色表面或完全没有表面。 该事件是通过在机器人前方两个不同位置检测到Thymio下方的表面而触发的。",
					"**参数：**。如果将传感器设置为带有红色边框的白色，则传感器会在检测到反射性表面（如白色）时触发事件。 将其设置为黑色会使传感器在没有表面（或黑色表面或透明表面）的情况下触发事件。 将其设置为深灰色意味着传感器将触发事件，触发前两次之间的级别。 当传感器设置为浅灰色时，它将被忽略。 两个滑块可用于设置两个所需的阈值：检测到表面/白色和灰色之间的阈值，以及介于灰色和黑色/无表面之间的阈值。",
					"选择多个传感器触发事件后，条件组合触发事件。 如果已将左右传感器设置为检测表面，则将在右传感器和左传感器检测到表面时触发该事件。",
					"**例如：**当左侧传感器检测到地面上有一条黑线时,则……（例如,机器人动作,右转以避开黑线）"
				],
				"ground 1": [
				"# 可调节地面传感器",
				"![地面1](vpl:block:ground-1)",
				"**使用的传感器：**地面接近传感器。",
				"**触发条件：**此事件是由Thymio以下地面的反射水平触发的。 表面的反射取决于其颜色，还取决于纹理和其他参数。",
				"例如，透明或黑色（无光泽，无反射）表面将被检测为不存在地面。 即使是深色的光滑表面也可以很好地反射。 白色表面反射良好。 该事件块允许选择触发传感器，触发情况（检测白色或黑色）并调整反射级别以区分黑色和白色表面。 每个传感器可以设置为不同的条件。",
				"**参数：**当传感器设置为带有红色边框的白色时，传感器会检测到反射表面，例如白色。 将其设置为黑色可使传感器检测到黑色表面（或无表面或透明表面）。 当传感器设置为灰色时，它将被忽略。",
				"程序员可以使用阈值（滑块）调整检测与不检测之间的区别，或者白色和黑色表面之间的区别，以了解在Thymio下检测到哪个黑色或白色范围。 传感器下方表面上显示了检测到的黑色或白色的范围。",
				"**例如：**当左侧传感器检测到白色表面,右侧传感器检测到黑线时,则……（机器人动作,例如向右转向黑线）"
				],
				"tap": [
				"# 碰撞检测",
				"![点击](vpl:block:tap)",
				"**使用的传感器：**3轴加速计。",
				"**触发条件：**此事件由任何方向的冲击触发。例如,用手轻敲会被检测到撞击",
				"**例如：**当机器人被敲击时,然后…（例如,机器人动作开始向前移动）"
				],
				"accelerometer": [
					"#加速度计",
					"![[加速度计](vpl:block:accelerometer)",
					"类型：事件或条件块",
					"..."	
				],
				"roll": [
				"# 滚动角度",
				"![滚动](vpl:block:roll)",
				"**使用的传感器：**3轴加速计。",
				"**触发条件：**  Thymio相对于重力方向的定向触发了此事件，向下的橙色小箭头表示了这一点。 此处观察到的角度是Thymio围绕其向前运动方向相对于水平面的旋转角度。 这称为侧倾角。 从Thymio机器人的背面可以看到该角度。",
				"**参数：**围绕圆移动圆形青色状态指示以选择所需的方向。当Thymio的方向接近此位置时,将触发此事件。",
				"**例如：**当机器人开始向左弯曲时,然后…（机器人动作,例如变红）"
				],
				"pitch": [
				"# 俯仰角",
				"![俯仰](vpl:block:pitch)",
				"**Sensor(s) used:** 3-axis accelerometer.",
				"**使用的传感器：**3轴加速计。",
				"**触发条件：**Thymio相对于重力方向的定向触发了此事件，向下的橙色小箭头表示了这一点。 此处观察到的角度对应于Thymio相对于水平面上升的角度。 旋转轴线平行于车轮的轴线。 这称为俯仰角。",
				"**参数：**围绕圆移动圆形青色状态指示以选择所需的方向。当Thymio的方向接近此位置时,将触发此事件。",
				"**例如：**当机器人开始向上移动时,然后…（机器人动作,例如变为红色）"
				],
				"yaw": [
				"# 偏航角",
				"![偏航](vpl:block:yaw)",
				"**使用的传感器：**3轴加速计。",
				"**触发条件：** Thymio相对于重力方向的定向触发了此事件，向下的橙色小箭头表示了这一点。 此处观察到的角度对应于Thymio垂直放置时Thymio围绕笔孔的旋转角度。 这称为偏航角。",
				"**参数：**围绕圆移动圆形青色状态指示以选择所需的方向。当Thymio的方向接近此位置时,将触发此事件。",
				"**例如：**当机器人放在其背面时,则…（机器人动作,例如变红）"
				],
				"clap": [
				"# 拍击（声音）检测",
				"![拍掌](vpl:block:clap)",
				"**使用的传感器：**麦克风。",
				"**触发条件：**当Thymio检测到响亮的声音时，将触发此事件。 机器人的轻敲也会触发此事件，因为它会在麦克风上产生很大的声音。 嘈杂的环境可能会以不受控制的方式触发此事件。",
				"**例如：**当我拍手时,然后…（例如,机器人动作开始向前移动）"
				],
				"init": [
					"#启动程序",
					"![初始化](vpl:block:init)",
					"**此事件不使用Thymio的特定传感器。**",
					"**触发条件：**当您点击VPL中的播放或重新开始按钮时,此事件在机器人程序启动时触发。您可以使用它来设置在程序开始时Thymio将执行的操作。",
					"**示例：**在程序开始时,开始于（机器人操作,例如将机器人颜色设置为红色）"
				],
				"timer": [
					"# 计时器",
					"![计时器](vpl:block:timer)",
					"**此事件不使用Thymio的特定传感器。它对Thymio内的计时器作出反应。**",
					"**触发条件：**当计时器（在操作中设置）结束时触发此事件。",
					"**示例：**当两秒钟（在操作中设置）已过时,则(机器人动作,例如开始移动"	],
				"clock": [
					"#重复事件",
					"![时钟](vpl:block:clock)",
					"**此事件块不使用Thymio的特定传感器。**它使用机器人的内部计时器。",
					"**触发条件：**此块按固定间隔生成事件。",
					"**参数：**事件频率可由用户在频率选择中设置：在10Hz时,此事件每秒生成10次,在20Hz时,此事件每秒生成20次。",
					"**例如：**10次/秒递增内部变量,然后计算十分之一秒 "
				],
				"remote control arrows": [
					"# 遥控器方向键",
					"![遥控箭头](vpl:block:remote-control-arrows)",
					"**使用的传感器：**红外遥控接收器。",
					"**触发条件：**按遥控器上的指定按钮时触发此事件。按钮代表遥控器的方向键。",
					"**参数：**橙色突出显示的按钮是触发事件的按钮。",
					"**例如：**当按下遥控器的’前进‘按钮时,则…（例如,机器人动作开始向前移动）"
					],
				"remote control keypad": [
					"# 遥控键盘",
					"![遥控键盘](vpl:block:remote-control-keypad)",
					"**使用的传感器：**红外遥控接收器。",
					"**触发条件：**按遥控器上的指定按钮时触发此事件。按钮表示遥控器的键盘。",
					"**参数：**橙色突出显示的按钮是触发事件的按钮。",
					"**示例：*当按下遥控器的按钮**2**时,然后…（机器人动作,例如开始向前移动）"
					],
				"state": [
				"# 状态（4 位）",
				"![状态](vpl:block:state)",
				"类型：条件块",
				"..."
				],
				"state 8": [
					"# 状态（8 个值）",
					"![状态 8](vpl:block:state-8)",
					"类型：条件块",
					"..."
						],
				"counter comparison": [
					"# 8-LED 状态算术比较",
					"![计数器比较](vpl:block:counter-comparison)",
					"**此条件块不使用Thymio的特定传感器。**它读取内部状态,即Thymio内部的8位变量。它只能用作条件,不能用作主事件。",
					"**触发条件：**Thymio上 圆型LED 表示的内部变量满足与固定值的比较时,此条件为真。",
					"**参数：**在左边,程序员可以选择要进行的比较：",
					"=等于",
					"≥ 大于或等于",
					">严格大于",
					"≤ 小于或等于",
					"<严格小于",
					"在右边,程序员可以选择一个从0到255的8位常量值。此常量值使用二进制表示法显示在圆形LED上,位0在顶部,位1在右上方,位2在右侧,以此类推",
					"**示例：**如果LED表示值6（设置了位1和2）,则(例如,机器人动作变为红色）"
				],
				"color 8 state": [
					"# 顶部颜色状态",
					"![颜色 8 状态](vpl:block:color-8-state)",
					"**此条件块不使用Thymio的特定传感器。**它读取Thymio顶部显示的RGB（红、绿、蓝）LED的状态。它只能用作条件,不能用作主事件。",
					"**触发条件：** Thymio顶部 RGB LED设置为特定颜色时,此条件为真。对每个颜色分量的比较是按位值进行的,这使得条件也适用于近似的颜色匹配",
					"**参数：**程序员可以从7种可用颜色中选择一种,或选择表示LED关闭的最后一个参数（右下角）。",
					"**示例：**如果Thymio的顶部LED为黄色,则(机器人动作,例如切换到红色）"
				],
				"bottom color 8 state": [
				"# 底部颜色状态",
				"![底部颜色状态](vpl:block:bottom-color-8-state)",
				"**此条件块不使用Thymio的特定传感器。**它读取Thymio底部显示的RGB（红、绿、蓝）LED的状态。它只能用作条件,不能用作主事件。",
				"**触发条件：**当底部Thymio RGB LED设置为特定颜色时,此条件为真。对每个颜色分量的比较是按扇区进行的,这使得条件也适用于近似的颜色匹配",
				"**参数：**程序员可以从7种可用颜色中选择一种,或选择表示LED关闭的最后一个参数（右下角）。",
				"**示例：**如果的底部LED为蓝色,则(例如,机器人动作,将它们切换为红色"
				],
				"acc side": [
					"# 侧放",
					"![侧放](vpl:block:acc-side)",
					"**使用的传感器：**3轴加速计。",
					"**触发条件：**当机器人转向左侧或右侧时,无论是在地上还是在空中,Thymio相对于重力方向的方向都会触发此事件。",
					"**例如：**当机器人侧放时,则…（机器人动作,例如打开LED圆圈上的左灯）"
				],
				"acc upside down": [
					"# 上下颠倒",
					"![上下颠倒](vpl:block:acc-upside-down)",
					"**使用的传感器：**3轴加速计。",
					"**触发条件：**当机器人倒转时,无论是在地上还是在空中,Thymio相对于重力方向的方向都会触发此事件。",
					"**例如：**当机器人倒置时,则…（机器人动作,例如发出不愉快的声音）"
				],
				"fall": [
					"# 跌落检测",
					"![跌落](vpl:block:fall)",
					"**使用的传感器：**3轴加速计。",
					"**触发条件：**此事件由Thymio跌落触发。这会导致加速计无法感应重力。",
					"**例如：**当机器人摔倒时…（例如,机器人动作使其变为红色）"
				],
				"ground mean": [
					"# 地面探测",
					"![地面检测平均值](vpl:block:ground-mean)",
					"**使用的传感器：**地面接近传感器。",
					"**触发条件：**此事件由检测到Thymio下是否存在反射地面触发。请注意,透明或黑色（无光泽、无反射）表面将被检测为没有接触地面。",
					"**参数：**当地面设置为白色并带有红色边框时,会检测到地面。将其设置为黑色可以检测不到接触地面（或黑色或透明）。",
					"**例如：**当我抬起Thymio时,它不再探测地面,然后…（机器人动作,例如发出高频声音）"
				],
				"state 256": [
				"# 8-LED状态检查",
				"![状态256](vpl:block:state-256)",
			"**此条件块不使用Thymio的特定传感器。**它读取Thymio按钮周围8个LED的状态。它只能用作条件,不能用作主事件。",
				"**触发条件：**当Thymio上的LED显示与块上定义的相同模式（LED亮起和熄灭）时,此条件为真。由于每个LED可以打开或关闭,因此有256种可能的组合。",
				"**参数：**每个led都可以设置为打开（黄色）或关闭（深灰色）或可忽略（浅灰色）。",
				"**示例：**如果只有顶部LED亮起,则(机器人动作,例如开始向前移动"
				],
				"state 256 with mask": [
					"#选择性 8-LED 检查",
					"![状态256（带掩码）](vpl:block：状态-256-with-mask)",
					"**此条件块不使用Thymio的特定传感器。**它读取Thymio按钮周围8个LED的状态。它只能用作条件,不能用作主事件。",
					"**触发条件：**当Thymio上的LED显示与块上定义的相同模式（LED亮起和熄灭）时,此条件为真。您可以选择只控制一些LED,忽略其他LED",
					"**参数：*每个led都可以设置为on（黄色）、off（深灰色）或可忽略（浅灰色）。这允许检测LED的部分配置,同时区分各种模式或制作LED子组。",
					"**示例：*如果左三个LED亮起,底部、右下和右LED熄灭,则(机器人动作,例如开始向左移动。"
				],
				"motor state": [
					"# 电机状态",
					"![电机状态](vpl:block:motor-state)",
					"类型：条件块",
					"..."
					],
				"motor": [
				"# 设置车轮速度",
				"![设置电机速度](vpl:block:motor)",
				"**执行机构：**两个车轮电机。",
			"**操作：**此操作设置左右每个车轮的速度,以使Thymio移动。Thymio将设置速度并调节电机以保持该速度。",
			"**参数：**两个滑块代表两个车轮的速度。每个速度可以是正的（向前移动）或负的（向后移动）。滑块上的位置指示车轮的速度。最大速度约为17cm/s",
				"要左转或右转,请将另一侧车轮的速度设置为高于另一侧车轮的速度。视两种速度而定,Thymio会做出更窄或更宽的曲线",
				"滑动手柄具有帮助设置速度的机制：当它显示一个深灰色点时,两个轮子上的速度相等。当显示红色方块时,车轮停止。",
				"**例如：**when（事件,例如检测到左侧障碍物）,然后开始笔直向前移动（两个车轮以相同的速度行驶）"			],
				"move": [
					"# 方向",
					"![移动](vpl:block:move)",
					"**执行机构：**两个车轮电机。",
					"**操作：**此操作使用一组9个预定义的速度参数设置Thymio的移动方向。",
					"**参数：**选择任意箭头使Thymio移动或选择中间按钮使其停止。",
					"**例如：**when（event,例如检测到左侧的障碍物）,然后开始向右移动"
				],
				"nn obstacles": [
					"# 避障神经网络",
					"![避障](vpl:block:nn-obstacles)",
					"Type:动作块",
					"..."
				],
				"top color": [
					"# 设置顶部颜色（RGB组件）",
					"![[顶部颜色](vpl:block:top-color)",
					"**执行器：**顶部彩色LED",
					"**操作：**此操作为Thymio顶部LED设置特定颜色,指定三种颜色组件：红色、绿色和蓝色（RGB）。",
					"**参数：**程序员可以使用滑块,通过附加颜色系统后面的红色、绿色和蓝色分量值来设置所需的颜色。当红色、蓝色和绿色的相等部分相互相加时,就会产生白光。强度左低右高",
					"**示例：**when（事件,例如检测到左侧的障碍物）,然后将顶部颜色设置为绿色%红色和100%红色（变为橙色）"
				],
				"top color 8": [
					"# 设置顶部颜色",
					"![顶部颜色8](vpl:block:top-color-8)",
					"**执行器：**顶部彩色LED",
				"**操作：**此操作允许程序员为顶部Thymio RGB（红、绿、蓝）LED设置特定颜色。",
					"**参数：**程序员可以从7种可用颜色中选择一种,或选择表示LED关闭的最后一个参数（右下角）。",
					"**例如：**when（事件,例如检测到左侧的障碍物）,然后将顶部颜色设置为黄色"
				],
				"bottom color": [
				"# 设置底部颜色（RGB组件）",
				"![底部颜色](vpl:block:bottom-color)",
				"**Actuator:** bottom color LED",
				"**执行器：**底部彩色LED",
				"**Action:** this action sets a specific color for the bottom Thymio LEDs specifying the three color components, Red, Green, and Blue (RGB).",
				"**操作：**此操作为底部ThymioLED设置特定颜色,指定三种颜色组件：红色、绿色和蓝色（RGB）。",
				"**参数：**程序员可以使用滑块来设置所需的颜色,该颜色由附加颜色系统后面的红色、绿色和蓝色分量值决定。当红色、蓝色和绿色的相等部分相互相加时,就会产生白光。强度左低右高",
				"**示例：**when（事件,例如检测到左侧的障碍物）,然后将底部颜色设置为绿色%红色和100%红色（变为橙色）"
				],
				"bottom-left color": [
				"# 设置左下角颜色（RGB组件）",
				"![左下角颜色](vpl:block:bottom-left-color)",
				"Type:动作块",
				"..."
				],
				"bottom-right color": [
					"# 设置右下角颜色（RGB组件）",
					"![右下角颜色](vpl:block:bottom-right-color)",
					"Type:动作块",
					"..."
									],
				"bottom color 8": [
					"# 设置底部颜色",
					"![底部颜色 8](vpl:block:bottom-color-8)",
					"**执行器：**底部彩色LED",
					"**操作：**此操作设置底部Thymio RGB（红、绿、蓝）LED的特定颜色。",
					"**参数：**程序员可以从7种可用颜色中选择一种,或选择表示LED关闭的最后一个参数（右下角）。",
					"**示例：**when（事件,例如检测到左侧的障碍物）,然后将底部颜色设置为蓝色"
				],
				"bottom-left color 8": [
				"#设置左下角颜色",
				"![左下角颜色 8](vpl:block:bottom-left-color-8)",
				"Type:动作块",
				"..."
				],
				"bottom-right color 8": [
				"# 设置右下角颜色",
				"![右下角颜色 8](vpl:block:bottom-right-color-8)",
				"Type:动作块",
				"..."
				],
				"notes": [
				"# 播放音调",
				"![播放音调](vpl:block:notes)",
				"**执行器：**扬声器",
				"**动作：**这个动作开始用Thymio演奏旋律。",
				"**参数：**每条蓝线对应一个音调。最多可放置六个音符。每次单击都会在黑色（一个时间单位）、白色（两个时间单位）或暂停（四个时间单位）之间切换。",
				"**例如：**当（事件,例如按下前进按钮）时,播放开始的音调 "
				],
				"notes with speed": [
					"# 用节奏演奏旋律",
					"![带有旋律的音调](vpl:block:notes-with-speed)",
					"**执行器：**扬声器",
					"**动作：**这个动作开始用Thymio演奏旋律。",
					"**参数：**每条蓝线对应一个音调,程序员可以通过单击音符的下方或上方来选择音符的位置。也可以通过单击来更改便笺的持续时间。持续时间如下：黑色音符的持续时间为一个单位,白色音符的持续时间为两个单位,空白处的持续时间为四个时间单位的静默 ",
					"顶部滑块允许设置旋律的节奏,即播放的速度。",
					"**例如：**当（事件,例如按下前进按钮）时,播放一段说明开始的快速旋律"
				],
				"play": [
					"# 从SD卡播放.wav文件",
					"![播放](vpl:block:play)",
					"**执行器：**扬声器",
					"**操作：*此操作将开始播放一个保存在插入Thymio的micro SD卡上的声音。",
					"**参数：*micro SD卡上的声音需要命名为*Px.wav*其中x是在此图标中输入的数字。例如,此图标将播放*P1.wav* ",
					"micro SD卡上的声音需要以8000Hz、mono、非压缩、无符号8位PCM、wav格式记录。micro SD卡需要在格式化为Fat32。",
					"**示例：*当（事件,例如按下前进按钮）时,播放一个声音,"
				],
				"play stop": [
					"# 停止播放.wav文件",
					"![播放停止](vpl:block:play-stop)",
					"**执行器：扬声器",
					"**操作：**此操作停止从插入Thymio的micro SD卡播放声音。",
					"**示例：**当（事件,例如计时器结束）时,停止播放说明机器人正在等待"
				],
				"set state 256": [
				"# 设置8个LED状态",
				"![设置状态256](vpl:block:set-state-256)",
				"**执行器：**环绕Thymio按钮的8个圆形LED。",
				"**操作：**此操作将打开或关闭每个LED。",
				"**参数：**每个led都可以设置为打开（黄色）、关闭（深灰色）或保持不变（浅灰色）。",
				"**例如：**当（事件,例如按下前进按钮）时,打开前面的LED并关闭所有其他LED"
				],
				"set state 256 with mask": [
					"# 设置8个LED中的一部分",
					"![设置状态256[带掩码](vpl:block:set-state-256-with-mask)",
					"**执行器：**环绕Thymio按钮的8个圆形LED。",
					"**操作：**此操作将打开或关闭某些LED,这些LED位于Thymio按钮周围的圆圈中。",
					"**参数：**每个led都可以设置为打开（黄色）、关闭（深灰色）或保持不变（浅灰色）。",
					"**例如：**当（事件,例如按下左按钮）时,打开左侧的一些LED,关闭三个右后LED,忽略右前LED"
				],
				"set timer": [
				"# 启动计时器",
				"![设置计时器](vpl:block:set-timer)",
				"**此操作不使用Thymio的特定执行器。**它在Thymio内设置计时器。",
				"**操作：**此操作设置计时器。一旦计时器上设置的时间过去,就会触发一个事件。",
				"**参数：**左边的数字可以设置秒,右边的数字可以设置十分之一秒。",
			"**例如：**当（事件,例如按下前按钮）时,将计时器设置为2秒0分。两秒钟后,发生一个*定时器启动*事件。"		],
				"set timer log": [
				"# 设置计时器（0.1-10秒）",
				"![设置计时器日志](vpl:block:set-timer-log)",
				"Type:动作块",
				"..."
				],
				"picture comment": [
				"# 图片注释",
				"![图片注释](vpl:block:picture-comment)",
				"Type:注释块",
				"..."
				],
				"arithmetic": [
				"# 计算",
				"![算术](vpl:block:arithmetic)",
				"**此操作不使用Thymio的特定执行器。**它在Thymio内设置一个变量。",
				"**操作：**此操作对由8个圆形黄色LED表示的值来执行数学运算。",
				"**参数：**在左边,程序员可以从运算符列表中选择：",
				"=设置为",
				"+加法",
				"-减法",
				"x乘法",
				"÷ 除法",
				"在右边,程序员可以选择一个从0到255的8位常量值。该值用二进制表示法在圆段上表示,位0在顶部,位1在右上角,位2在右上角,以此类推；存储的值为1表示深蓝色,0表示浅蓝色。",
				"最后一个操作是应用选定的运算符,将常量值作为第二个参数。例如,‘x 4’将乘以黄色LED显示值的四倍",
				"根据操作的不同,结果可以大于255或小于0。在这种情况下,结果可以设置为0或255,也可以通过此限制并以循环方式运行。如果设置,操作254+4将产生2,因为当传递255时,变量从0继续。",
				"LED圆的左上方的开关允许启用和禁用二进制数的饱和度。 将操纵杆放在两个LED之间时，将启用饱和（254 + 4 = 255）。 当控制杆不在圆上时，饱和度将被禁用（254 + 4 = 2）。"
			
				]
			}
		}
	}
}
